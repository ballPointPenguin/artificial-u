import logging
import uuid
from typing import List, Optional

from google.genai import types

from artificial_u.integrations.gemini import gemini_client
from artificial_u.models.core import Professor
from artificial_u.prompts.images import format_professor_image_prompt
from artificial_u.services.storage_service import StorageService

logger = logging.getLogger(__name__)


class ImageService:
    """
    Service for generating images using AI models and storing them.

    This service handles image generation through Google's Imagen API and
    stores the resulting images in a configurable storage backend (MinIO/S3).
    """

    def __init__(self, storage_service: StorageService):
        """
        Initialize the image generation service.

        Args:
            storage_service: The storage service for persisting generated images
        """
        self.storage_service = storage_service

        # Get model name from settings
        from artificial_u.config import get_settings

        self.settings = get_settings()
        self.model_name = self.settings.GEMINI_IMAGEN_MODEL

    async def generate_image(self, prompt: str, aspect_ratio: str = "1:1") -> List[str]:
        """
        Generates an image based on the provided prompt using the Google Imagen model.

        Args:
            prompt: The text prompt to generate the image from
            aspect_ratio: The desired aspect ratio for the image (default: "1:1")

        Returns:
            A list of storage keys (object names) for the generated images
        """
        logger.info(
            f"Generating image with prompt: '{prompt[:100]}...' (aspect ratio: {aspect_ratio})"
        )

        try:
            # Call the Imagen API
            response = gemini_client.models.generate_images(
                model=self.model_name,
                prompt=prompt,
                config=types.GenerateImagesConfig(
                    number_of_images=1,
                    aspect_ratio=aspect_ratio,
                ),
            )

            if not response.generated_images:
                logger.warning("No images were generated by the API")
                return []

            # Upload images to storage
            uploaded_keys = []
            bucket = self.storage_service.images_bucket

            for generated_image in response.generated_images:
                image_bytes = generated_image.image.image_bytes
                # Generate a simple UUID filename (not nested in subdirectories)
                # for easier direct URL access
                file_name = f"{uuid.uuid4()}.png"

                # Upload to storage
                success, url = await self.storage_service.upload_file(
                    file_data=image_bytes,
                    bucket=bucket,
                    object_name=file_name,
                    content_type="image/png",
                )

                if success:
                    uploaded_keys.append(file_name)
                    logger.info(f"Image uploaded to {bucket}/{file_name}, URL: {url}")
                else:
                    logger.error(f"Failed to upload image to {bucket}/{file_name}")

            logger.info(f"Successfully uploaded {len(uploaded_keys)} image(s)")
            return uploaded_keys

        except Exception as e:
            logger.error(f"Error generating image: {str(e)}", exc_info=True)
            return []

    async def generate_professor_image(
        self, professor: Professor, aspect_ratio: str = "1:1"
    ) -> Optional[str]:
        """
        Generates a profile image for a given professor.

        Args:
            professor: The Professor object
            aspect_ratio: The desired aspect ratio for the image prompt

        Returns:
            The storage key of the generated image, or None if generation failed
        """
        # Generate a prompt specifically for this professor
        prompt = format_professor_image_prompt(professor, aspect_ratio=aspect_ratio)
        logger.info(f"Generating image for professor {professor.id} ({professor.name})")

        # Generate just one image for the professor's profile
        image_keys = await self.generate_image(prompt=prompt, aspect_ratio=aspect_ratio)

        if image_keys:
            logger.info(
                f"Successfully generated image for professor {professor.id}: {image_keys[0]}"
            )
            return image_keys[0]  # Return the first (and only) key
        else:
            logger.error(f"Failed to generate image for professor {professor.id}")
            return None
